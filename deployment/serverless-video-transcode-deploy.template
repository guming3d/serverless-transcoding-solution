AWSTemplateFormatVersion: "2010-09-09"

Description: "(SO0017) - The AWS CloudFormation template for deployment of the AWS Serverless Video Transcode resources. Version %%VERSION%%"

Parameters:
    KeycloakDomain:
        Type: String
        Description: Keycloak domain name which will do the user authentication.
        AllowedPattern: ".+"
    KeycloakRealm:
        Type: String
        Description: Keycloak Realm name
        AllowedPattern: ".+"
    KeycloakClientId:
        Type: String
        Description: Keycloak client ID
        AllowedPattern: ".+"

Metadata:
    AWS::CloudFormation::Interface:
        ParameterGroups:
            -
                Label:
                    default: "Administrator Configuration"
                Parameters:
                    - KeycloakDomain
                    - KeycloakRealm
                    - KeycloakClientId
        ParameterLabels:
            KeycloakDomain:
                default: "Keycloak Domain name"
            KeycloakRealm:
                default: "Keycloak Realm name"
            KeycloakClientId:
                default: "Keycloak Client Id"

Mappings:
    SourceCode:
        General:
            S3Bucket: "%%BUCKET_NAME%%"
            KeyPrefix: "%%SOLUTION_NAME%%/%%VERSION%%"
            S3TemplateBucket: "%%TEMPLATE_BUCKET_NAME%%"
            SolutionName: "%%SOLUTION_NAME%%"
    Solution:
        Data:
            SendAnonymousUsageData: "Yes"

Resources:
    ServerlessVideoTranscodeStorageStack:
        Type: "AWS::CloudFormation::Stack"
        Properties:
            TemplateURL: !Join ["/", ["https://s3.cn-north-1.amazonaws.com.cn", !FindInMap ["SourceCode", "General", "S3TemplateBucket"], !FindInMap ["SourceCode", "General", "KeyPrefix"], "serverless-video-transcode-storage.template"]]

    ServerlessVideoTranscodeServicesStack:
        Type: "AWS::CloudFormation::Stack"
        Properties:
            TemplateURL: !Join ["/", ["https://s3.cn-north-1.amazonaws.com.cn", !FindInMap ["SourceCode", "General", "S3TemplateBucket"], !FindInMap ["SourceCode", "General", "KeyPrefix"], "serverless-video-transcode-services.template"]]
            Parameters:
                SourceS3Bucket: !Join ["-", [!FindInMap ["SourceCode", "General", "S3Bucket"], Ref: "AWS::Region"]]
                SourceKeyPrefix: !FindInMap ["SourceCode", "General", "KeyPrefix"]
                FederatedLogin: true
                KeycloakDomain: !Ref KeycloakDomain
                KeycloakClientId: !Ref KeycloakClientId
                KeycloakRealm: !Ref KeycloakRealm

    ServerlessVideoTranscodeApiStack:
        DependsOn: 
            - "ServerlessVideoTranscodeServicesStack"
        Type: "AWS::CloudFormation::Stack"
        Properties:
            TemplateURL: !Join ["/", ["https://s3.cn-north-1.amazonaws.com.cn", !FindInMap ["SourceCode", "General", "S3TemplateBucket"], !FindInMap ["SourceCode", "General", "KeyPrefix"], "serverless-video-transcode-api.template"]]
            Parameters:
                AuthorizerArn: !GetAtt ServerlessVideoTranscodeServicesStack.Outputs.AuthorizerArn
                AdminArn: !GetAtt ServerlessVideoTranscodeServicesStack.Outputs.AdminArn
                CartArn: !GetAtt ServerlessVideoTranscodeServicesStack.Outputs.CartArn
                ProfileArn: !GetAtt ServerlessVideoTranscodeServicesStack.Outputs.ProfileArn
                SearchArn: !GetAtt ServerlessVideoTranscodeServicesStack.Outputs.SearchArn
                PackageArn: !GetAtt ServerlessVideoTranscodeServicesStack.Outputs.PackageArn

    ServerlessVideoTranscodeAppConfig:
        DependsOn:
            - "ConsoleCFDistribution"
            - "ServerlessVideoTranscodeApiStack"
            - "ServerlessVideoTranscodeStorageStack"
            - "ServerlessVideoTranscodeUuid"
        Type: "Custom::LoadLambda"
        Properties:
            ServiceToken:
                Fn::GetAtt:
                    - "ServerlessVideoTranscodeHelper"
                    - "Arn"
            Region:
                - Ref: "AWS::Region"
            defaultS3Bucket: !Join ["", ["serverless-video-transcode-", Ref: "AWS::Region", "-", Ref: "AWS::AccountId"]]
            appUrl: !Join ["", ["https://", !GetAtt ConsoleCFDistribution.DomainName]]
            auditLogging: false
            cartAccessExpiration: 14400
            searchResultsLimit: 100
            apiEndpoint: !Join ["", ["https://", !GetAtt ServerlessVideoTranscodeApiStack.Outputs.ApiId, ".execute-api.", Ref: "AWS::Region", ".amazonaws.com.cn/prod" ]]
            esindex: "serverless-video-transcode"
            esurl: !Join ["", ["https://", !GetAtt ServerlessVideoTranscodeStorageStack.Outputs.EsCluster ]]
            kmsKeyId: !Join ["", ["alias/serverless-video-transcode-", Ref: "AWS::Region" ]]
            anonymousData: !FindInMap ["Solution", "Data", "SendAnonymousUsageData"]
            UUID: !GetAtt ServerlessVideoTranscodeUuid.UUID
            customAction: "loadAppConfig"

    ServerlessVideoTranscodeSearchIndex:
        DependsOn:
            - "ServerlessVideoTranscodeStorageStack"
        Type: "Custom::LoadLambda"
        Properties:
            ServiceToken:
                Fn::GetAtt:
                    - "ServerlessVideoTranscodeHelper"
                    - "Arn"
            Region:
                - Ref: "AWS::Region"
            clusterUrl: !Join ["", ["https://", !GetAtt ServerlessVideoTranscodeStorageStack.Outputs.EsCluster ]]
            searchIndex: "serverless-video-transcode"
            customAction: "configureSearch"

    ServerlessVideoTranscodeS3Resources:
        Type: "Custom::LoadLambda"
        Properties:
            ServiceToken:
                Fn::GetAtt:
                    - "ServerlessVideoTranscodeHelper"
                    - "Arn"
            Region:
                - Ref: "AWS::Region"
            serverlessVideoTranscodeDefaultBucket: !Join ["", ["serverless-video-transcode-", Ref: "AWS::Region", "-", Ref: "AWS::AccountId"]]
            serverlessVideoTranscodeWebsiteBucket: !Join ["", ["serverless-video-transcodeweb-", Ref: "AWS::Region", "-", Ref: "AWS::AccountId"]]
            customAction: "configureServerlessVideoTranscodeBuckets"

    ServerlessVideoTranscodeWebsite:
        DependsOn:
            - "ServerlessVideoTranscodeS3Resources"
        Type: "Custom::LoadLambda"
        Properties:
            ServiceToken:
                Fn::GetAtt:
                    - "ServerlessVideoTranscodeHelper"
                    - "Arn"
            Region:
                - Ref: "AWS::Region"
            sourceS3Bucket: !Join ["-", [!FindInMap ["SourceCode", "General", "S3Bucket"], Ref: "AWS::Region"]]
            sourceS3key: !Join ["/", [!FindInMap ["SourceCode", "General", "KeyPrefix"], "site"]]
            sourceSiteManifestS3key: !Join ["/", [!FindInMap ["SourceCode", "General", "KeyPrefix"], "serverless-video-transcode-site-manifest.json"]]
            destS3Bucket: !Join ["", ["serverless-video-transcodeweb-", Ref: "AWS::Region", "-", Ref: "AWS::AccountId"]]
            customAction: "configureWebsite"

    ServerlessVideoTranscodeWebsiteBucketPolicy:
        DependsOn:
            - "ConsoleCFOriginAccessIdentity"
        Type: "Custom::LoadLambda"
        Properties:
            ServiceToken:
                Fn::GetAtt:
                    - "ServerlessVideoTranscodeHelper"
                    - "Arn"
            Region:
                - Ref: "AWS::Region"
            serverlessVideoTranscodeWebsiteBucket: !Join ["", ["serverless-video-transcodeweb-", Ref: "AWS::Region", "-", Ref: "AWS::AccountId"]]
            consoleCanonicalUserId: !GetAtt ConsoleCFOriginAccessIdentity.S3CanonicalUserId
            customAction: "configureServerlessVideoTranscodeBucketPolicy"

    ServerlessVideoTranscodeUuid:
        Type: "Custom::LoadLambda"
        Properties:
            ServiceToken:
                Fn::GetAtt:
                    - "ServerlessVideoTranscodeHelper"
                    - "Arn"
            Region:
                - Ref: "AWS::Region"
            customAction: "createUuid"

    ServerlessVideoTranscodeGlueResources:
        Type: "Custom::LoadLambda"
        Properties:
            ServiceToken:
                Fn::GetAtt:
                    - "ServerlessVideoTranscodeHelper"
                    - "Arn"
            Region:
                - Ref: "AWS::Region"
            customAction: "cleanServerlessVideoTranscodeGlueResources"

    ServerlessVideoTranscodeAnonymousMetric:
        Type: "Custom::LoadLambda"
        Properties:
            ServiceToken:
                Fn::GetAtt:
                    - "ServerlessVideoTranscodeHelper"
                    - "Arn"
            Region:
                - Ref: "AWS::Region"
            solutionId: "SO0017"
            UUID: !GetAtt ServerlessVideoTranscodeUuid.UUID
            version: "1"
            anonymousData: !FindInMap ["Solution", "Data", "SendAnonymousUsageData"]
            customAction: "sendMetric"

    ServerlessVideoTranscodeHelperRole:
        Type: "AWS::IAM::Role"
        Metadata:
            cfn_nag:
                rules_to_suppress:
                  - id: W28
                    reason: "Explicit role name to avoid cyclic dependency, easy referencing and better readeability of code"
                  - id: W11
                    reason: "Resources for Cognito pool have not been created so far. Hence '*'"
                  - id: W76
                    reason: "To be added later."
        Properties:
            RoleName: !Join ["-", ["serverless-video-transcode-helper-role", Ref: "AWS::Region" ]]
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    -
                        Effect: "Allow"
                        Principal:
                            Service:
                                - "lambda.amazonaws.com"
                        Action:
                                - "sts:AssumeRole"
            Path: "/"
            Policies:
                -
                    PolicyName: "ServerlessVideoTranscodeHelperPolicy"
                    PolicyDocument:
                        Version: "2012-10-17"
                        Statement:
                            -
                                Effect: "Allow"
                                Action:
                                    - "logs:CreateLogGroup"
                                    - "logs:CreateLogStream"
                                    - "logs:PutLogEvents"
                                Resource:
                                    - !Join ["", ["arn:", Ref: "AWS::Partition", ":", "logs", ":", Ref: "AWS::Region", ":", Ref: "AWS::AccountId", ":log-group:/aws/lambda/serverless-video-transcode-helper:*"]]
                            -
                                Effect: "Allow"
                                Action:
                                    - "dynamodb:PutItem"
                                Resource:
                                    - !Join ["", ["arn:", Ref: "AWS::Partition", ":", "dynamodb", ":", Ref: "AWS::Region", ":", Ref: "AWS::AccountId", ":table/serverless-video-transcode-settings"]]
                            -
                                Effect: "Allow"
                                Action:
                                    - "dynamodb:Scan"
                                Resource:
                                    - !Join ["", ["arn:", Ref: "AWS::Partition", ":", "dynamodb", ":", Ref: "AWS::Region", ":", Ref: "AWS::AccountId", ":table/serverless-video-transcode-packages"]]
                            -
                                Effect: "Allow"
                                Action:
                                    - "cognito-idp:CreateUserPool"
                                # Resource being created now.
                                Resource:
                                    - "*"
                            -
                                Effect: "Allow"
                                Action:
                                    - "cognito-idp:UpdateUserPool"
                                    - "cognito-idp:AddCustomAttributes"
                                    - "cognito-idp:CreateUserPoolClient"
                                    - "cognito-idp:AdminCreateUser"
                                    - "cognito-idp:UpdateUserPoolClient"
                                    - "cognito-idp:CreateUserPoolDomain"
                                    - "cognito-idp:CreateIdentityProvider"
                                    - "cognito-idp:DescribeUserPoolClient"
                                    - "cognito-idp:ListUserPoolClients"
                                    - "cognito-idp:UpdateUserPoolClient"
                                Resource:
                                    - !Join ["", ["arn", ":", Ref: "AWS::Partition", ":", "cognito-idp:", Ref: "AWS::Region", ":", Ref: "AWS::AccountId", ":userpool/*"]]
                            -
                                Effect: "Allow"
                                Action:
                                    - "es:ESHttpPut"
                                Resource:
                                    !Join ["", ["arn", ":",  Ref: "AWS::Partition", ":", "es:", Ref: "AWS::Region", ":", Ref: "AWS::AccountId", ":domain/serverless-video-transcode/*"]]
                            -
                                Effect: "Allow"
                                Action:
                                    - "es:UpdateElasticsearchDomainConfig"
                                Resource:
                                    !Join ["", ["arn", ":", Ref: "AWS::Partition", ":", "es", ":", Ref: "AWS::Region", ":", Ref: "AWS::AccountId", ":domain/serverless-video-transcode"]]
                            -
                                Effect: "Allow"
                                Action:
                                    - "s3:GetObject"
                                Resource:
                                    - !Join [":", ["arn",  Ref: "AWS::Partition", "s3:::*"]]
                            -
                                Effect: "Allow"
                                Action:
                                    - "s3:PutObject"
                                    - "s3:ListObjects"
                                    - "s3:DeleteObject"
                                Resource:
                                    - !Join ["", ["arn", ":", Ref: "AWS::Partition", ":s3:::serverless-video-transcodeweb-", Ref: "AWS::Region", "-", Ref: "AWS::AccountId", "/*" ]]
                            -
                                Effect: "Allow"
                                Action:
                                    - "s3:CreateBucket"
                                    - "s3:DeleteBucket"
                                    - "s3:PutBucketPolicy"
                                    - "s3:ListObjects"
                                    - "s3:ListBucket"
                                    - "s3:PutBucketWebsite"
                                Resource:
                                    - !Join ["", ["arn", ":",  Ref: "AWS::Partition", ":s3:::serverless-video-transcodeweb-", Ref: "AWS::Region", "-", Ref: "AWS::AccountId"]]
                            -
                                Effect: "Allow"
                                Action:
                                    - "s3:CreateBucket"
                                    - "s3:PutBucketCORS"
                                Resource:
                                    - !Join ["", ["arn", ":",  Ref: "AWS::Partition", ":s3:::serverless-video-transcode-", Ref: "AWS::Region", "-", Ref: "AWS::AccountId"]]
                            -
                                Effect: "Allow"
                                Action:
                                    - "glue:DeleteDatabase"
                                    - "glue:DeleteCrawler"
                                # At the time of writing this service does not have ARNs, so * will be used
                                Resource: "*"
                            -
                                Effect: "Allow"
                                Action:
                                    - "iam:GetRole"
                                    - "iam:PassRole"
                                Resource:
                                    - !GetAtt ServerlessVideoTranscodeStorageStack.Outputs.ConfigureRoleArn
                            -
                                Effect: "Allow"
                                Action:
                                    - "logs:PutResourcePolicy"
                                    - "logs:DeleteResourcePolicy"
                                Resource:
                                    - !Join ["", ["arn", ":",  Ref: "AWS::Partition", ":", "logs:", Ref: "AWS::Region", ":", Ref: "AWS::AccountId", ":log-group::log-stream:*"]]

    ServerlessVideoTranscodeHelper:
        Type: "AWS::Lambda::Function"
        Properties:
            Code:
                S3Bucket: !Join ["-", [!FindInMap ["SourceCode", "General", "S3Bucket"], Ref: "AWS::Region"]]
                S3Key: !Join ["/", [!FindInMap ["SourceCode", "General", "KeyPrefix"],  "serverless-video-transcode-helper.zip"]]
            Description: "A Serverless Video Transcode helper function for solution deployment"
            FunctionName: "serverless-video-transcode-helper"
            Handler: "index.handler"
            MemorySize: "256"
            Role:
                Fn::GetAtt:
                    - "ServerlessVideoTranscodeHelperRole"
                    - "Arn"
            Runtime: "nodejs12.x"
            Timeout: "300"

    ServerlessVideoTranscodeDeployment:
        DependsOn: "ServerlessVideoTranscodeApiStack"
        Type: "AWS::ApiGateway::Deployment"
        Metadata:
            cfn_nag:
                rules_to_suppress:
                    - id: W68
                      reason: "to be added later"
        Properties:
            StageDescription:
                AccessLogSetting:
                    DestinationArn: !Join [":", ["arn", Ref: "AWS::Partition", "logs", Ref: "AWS::Region", Ref: "AWS::AccountId", !Join ["/",["log-group:API-Gateway-Execution-Logs-ServerlessVideoTranscodeApi", !GetAtt "ServerlessVideoTranscodeApiStack.Outputs.ApiId"]]]]
                    Format: $context.identity.sourceIp $context.identity.caller $context.identity.user [$context.requestTime] "$context.httpMethod $context.resourcePath $context.protocol" $context.status $context.responseLength $context.requestId
            RestApiId: !GetAtt ServerlessVideoTranscodeApiStack.Outputs.ApiId
            Description: "Production"
            StageName: "prod"

    ApiLoggingRole:
        Type: AWS::IAM::Role
        Metadata:
            cfn_nag:
                rules_to_suppress:
                  - id: W11
                    reason: API Gateway requires these permissions for CloudWatch Logging (https://docs.aws.amazon.com/apigateway/latest/developerguide/set-up-logging.html#set-up-access-logging-permissions)
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17" 
                Statement:
                    - Effect: "Allow"
                      Principal:
                        Service:
                            - "apigateway.amazonaws.com"
                      Action:
                        - "sts:AssumeRole"
            Path: "/"
            Policies: 
                - PolicyName: "api-gateway-logging"
                  PolicyDocument:
                    Version: "2012-10-17"
                    Statement:
                        - Effect: "Allow"
                          Action:
                            - "logs:CreateLogGroup"
                            - "logs:CreateLogStream"
                            - "logs:DescribeLogGroups"
                            - "logs:DescribeLogStreams"
                            - "logs:PutLogEvents"
                            - "logs:GetLogEvents"
                            - "logs:FilterLogEvents"
                          Resource: !Sub "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:*"
 
    ApiAccountConfig: 
        Type: "AWS::ApiGateway::Account" 
        Properties: 
            CloudWatchRoleArn: !GetAtt ApiLoggingRole.Arn 

    ConsoleCFOriginAccessIdentity:
        Type: "AWS::CloudFront::CloudFrontOriginAccessIdentity"
        Properties:
            CloudFrontOriginAccessIdentityConfig:
                Comment: !GetAtt ServerlessVideoTranscodeUuid.UUID

    CFServerlessVideoTranscodeAccessBucket:
        Type: AWS::S3::Bucket
        Metadata:
            cfn_nag:
                rules_to_suppress:
                    - id: W51
                      reason: "The bucket is not public. When using the CF template in PROD, create a bucket policy to allow only administrators/ auditors access to the bucket"
        DeletionPolicy: Retain
        Properties:
            BucketEncryption:
                ServerSideEncryptionConfiguration:
                    - ServerSideEncryptionByDefault:
                        SSEAlgorithm: AES256
            BucketName: !Join ["-", [!FindInMap ["SourceCode", "General", "SolutionName"], !Ref "AWS::AccountId", !Ref "AWS::Region", "cf-access-log"]]
            LoggingConfiguration:
                DestinationBucketName: !Ref S3LoggingBucket
                LogFilePrefix: "s3-access-logs-"
            PublicAccessBlockConfiguration:
                BlockPublicAcls: true
                BlockPublicPolicy: true
                IgnorePublicAcls: true
                RestrictPublicBuckets: true
                

    S3LoggingBucket:
        DeletionPolicy: Retain
        Type: AWS::S3::Bucket
        Metadata:
            cfn_nag:
                rules_to_suppress:
                  - id: W35
                    reason: "This S3 bucket is used as the destination for storing access logs"
                  - id: W51
                    reason: "The bucket is not public. When using the CF template in PROD, create a bucket policy to allow only administrators/ auditors access to the bucket"
        Properties:
            BucketName: !Join ["-", [!FindInMap ["SourceCode", "General", "SolutionName"], !Ref "AWS::AccountId", !Ref "AWS::Region", "s3-access-log"]]
            AccessControl: LogDeliveryWrite
            BucketEncryption:
                ServerSideEncryptionConfiguration:
                    - ServerSideEncryptionByDefault:
                        SSEAlgorithm: AES256
            PublicAccessBlockConfiguration:
                BlockPublicAcls: true
                BlockPublicPolicy: true
                IgnorePublicAcls: true
                RestrictPublicBuckets: true

    ConsoleCFDistribution:
        DependsOn:
            - "ServerlessVideoTranscodeWebsite"
            - "ConsoleCFOriginAccessIdentity"
        Type: "AWS::CloudFront::Distribution"
        Metadata:
            cfn_nag:
                rules_to_suppress:
                    - id: W70
                      reason: "To be added later"
        Properties:
          DistributionConfig:
            Comment: "Distribution for AWS Serverless Video Transcode console"
            DefaultCacheBehavior:
                AllowedMethods:
                    - HEAD
                    - DELETE
                    - POST
                    - GET
                    - OPTIONS
                    - PUT
                    - PATCH
                CachedMethods:
                    - HEAD
                    - GET
                Compress: true
                DefaultTTL: 0
                MaxTTL: 0
                MinTTL: 0
                ForwardedValues:
                    Cookies:
                        Forward: all
                    QueryString: true
                TargetOriginId: "S3-serverless-video-transcodeweb"
                ViewerProtocolPolicy : redirect-to-https
            DefaultRootObject: index.html
            HttpVersion: http2
            IPV6Enabled: false
            Logging:
                Bucket: !Join [".", [Ref: "CFServerlessVideoTranscodeAccessBucket", "s3.cn-north-1.amazonaws.com.cn"]]
                IncludeCookies: true
                Prefix: "cf-dl-"
            Origins:
                -
                    DomainName: !Join ["", ["serverless-video-transcodeweb-", Ref: "AWS::Region", "-", Ref: "AWS::AccountId", ".s3.", Ref: "AWS::Region", ".amazonaws.com.cn"]]
                    Id: "S3-serverless-video-transcodeweb"
                    S3OriginConfig:
                        OriginAccessIdentity: !Join ["", ["origin-access-identity/cloudfront/", !Ref ConsoleCFOriginAccessIdentity]]
            ViewerCertificate:
                CloudFrontDefaultCertificate: true
            Enabled: true

    AppVariables:
        DependsOn:
            - "ServerlessVideoTranscodeApiStack"
            - "ConsoleCFDistribution"
        Type: "Custom::LoadLambda"
        Properties:
            ServiceToken:
                Fn::GetAtt:
                    - "ServerlessVideoTranscodeHelper"
                    - "Arn"
            Region:
                - Ref: "AWS::Region"
            apigEndpoint: !Join ["", ["https://", !GetAtt ServerlessVideoTranscodeApiStack.Outputs.ApiId, ".execute-api.", Ref: "AWS::Region", ".amazonaws.com.cn/prod" ]]
            appVersion: "%%VERSION%%"
            destS3Bucket: !Join ["", ["serverless-video-transcodeweb-", Ref: "AWS::Region", "-", Ref: "AWS::AccountId"]]
            federatedLogin: true
            loginUrl: !Join ["", ["https://", !GetAtt ConsoleCFDistribution.DomainName]]
            logoutUrl: !Join ["", ["https://", !GetAtt ConsoleCFDistribution.DomainName]]
            keycloakUrl: !Ref KeycloakDomain
            keycloakRealm: !Ref KeycloakRealm
            keycloakClientId: !Ref KeycloakClientId
            customAction: "createAppVariables"

Outputs:
    ConsoleUrl:
        Description: "URL for the Serverless Video Transcode console"
        Value: !Join ["", ["https://", !GetAtt ConsoleCFDistribution.DomainName]]
    UUID:
        Description: "UUID for Serverless Video Transcode deployment"
        Value: !GetAtt ServerlessVideoTranscodeUuid.UUID
