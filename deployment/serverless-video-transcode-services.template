AWSTemplateFormatVersion: "2010-09-09"

Description: "The AWS CloudFormation template for deployment of the AWS Serverless Video Transcode resources"

Parameters:
    SourceS3Bucket:
        Type: String
    SourceKeyPrefix:
        Type: String
    FederatedLogin:
        Type: String

Resources:
    ServerlessVideoTranscodeKmsKey:
        Type: "AWS::KMS::Key"
        Properties:
            Description: "Serverless Video Transcode KMS Key"
            KeyPolicy:
                Version: "2012-10-17"
                Id: "serverless-video-transcode-key-default-1"
                Statement:
                    - Sid: "Allow administration of the key"
                      Effect: "Allow"
                      Principal:
                          AWS:
                              !Join ["", ["arn", ":",  Ref: "AWS::Partition", ":", "iam::", Ref: "AWS::AccountId", ":root" ]]
                      Action:
                          - "kms:*"
                      # Resource being created now. No target key id defined yet.
                      Resource: "*"
            EnableKeyRotation: true

    ServerlessVideoTranscodeKmsKeyAlias:
        Type: AWS::KMS::Alias
        Properties:
            AliasName: !Join ["", ["alias/serverless-video-transcode-", Ref: "AWS::Region"]]
            TargetKeyId:
                Ref: ServerlessVideoTranscodeKmsKey

    ServerlessVideoTranscodeLoggingRole:
        Type: "AWS::IAM::Role"
        Metadata:
            cfn_nag:
                rules_to_suppress:
                  - id: W28
                    reason: "Explicit names to handle cyclic referencing"
        Properties:
            RoleName:
                !Join ["-", ["serverless-video-transcode-logging-role", Ref: "AWS::Region"]]
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    - Effect: "Allow"
                      Principal:
                          Service:
                              - "lambda.amazonaws.com"
                      Action:
                          - "sts:AssumeRole"
            Path: "/"

    ServerlessVideoTranscodeLoggingPolicy:
        Type: "AWS::IAM::ManagedPolicy"
        Properties:
            Description: "Serverless Video Transcode policy for the logging microservice Lambda function."
            PolicyDocument:
                Version: "2012-10-17"
                Statement:
                    - Effect: "Allow"
                      Action:
                          - "logs:CreateLogGroup"
                          - "logs:CreateLogStream"
                          - "logs:PutLogEvents"
                      Resource:
                          - !Join ["", ["arn", ":",  Ref: "AWS::Partition", ":", "logs:", Ref: "AWS::Region", ":", Ref: "AWS::AccountId", ":log-group:/serverless-video-transcode/audit-log:*" ]]
                          - !Join ["", ["arn", ":",  Ref: "AWS::Partition", ":", "logs:", Ref: "AWS::Region", ":", Ref: "AWS::AccountId", ":log-group:/aws/lambda/serverless-video-transcode-logging-service:*" ]]
                    - Effect: "Allow"
                      Action:
                          - "dynamodb:GetItem"
                          - "dynamodb:PutItem"
                          - "dynamodb:Query"
                          - "dynamodb:Scan"
                          - "dynamodb:UpdateItem"
                      Resource:
                          - !Join ["", ["arn", ":",  Ref: "AWS::Partition", ":", "dynamodb:", Ref: "AWS::Region", ":", Ref: "AWS::AccountId", ":table/serverless-video-transcode-settings" ]]
            Roles:
                - Ref: "ServerlessVideoTranscodeLoggingRole"

    ServerlessVideoTranscodeLoggingService:
        Type: "AWS::Lambda::Function"
        Metadata:
            cfn_nag:
                rules_to_suppress:
                -   id: W58
                    reason: "To be added later"
        Properties:
            Code:
                S3Bucket: !Ref SourceS3Bucket
                S3Key: !Join [ "/", [!Ref SourceKeyPrefix, "serverless-video-transcode-logging-service.zip"]]
            Description: "A Serverless Video Transcode microservice function for logging functionality"
            FunctionName: "serverless-video-transcode-logging-service"
            Handler: "index.handler"
            MemorySize: "256"
            Role:
                Fn::GetAtt:
                    - "ServerlessVideoTranscodeLoggingRole"
                    - "Arn"
            Runtime: "nodejs12.x"
            Timeout: "60"

    ServerlessVideoTranscodeAdminRole:
        Type: "AWS::IAM::Role"
        Metadata:
            cfn_nag:
                rules_to_suppress:
                -   id: W58
                    reason: "To be added later"
        Metadata:
            cfn_nag:
                rules_to_suppress:
                  - id: W28
                    reason: "Explicit names to avoid cyclic dependency with policy statements, easy refeerncing and better readability of code"
        Properties:
            RoleName: !Join ["-", ["serverless-video-transcode-admin-role", Ref: "AWS::Region"]]
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    - Effect: "Allow"
                      Principal:
                          Service:
                              - "lambda.amazonaws.com"
                      Action:
                          - "sts:AssumeRole"
            Path: "/"

    ServerlessVideoTranscodeAdminPolicy:
        Type: "AWS::IAM::ManagedPolicy"
        Metadata:
            cfn_nag:
                rules_to_suppress:
                -   id: W58
                    reason: "To be added later"
                -   id: F5
                    reason: "The '*' is only for putting logs to cloudwatch logs. The ARNs for the lambda are generated and referencing them becomes a cyclic dependency. For Cognito, since it is admin policy, it allows Admin to create groups & users"
        Properties:
            Description: "Serverless Video Transcode policy for the admin microservice Lambda function."
            PolicyDocument:
                Version: "2012-10-17"
                Statement:
                    - Effect: "Allow"
                      Action:
                          - "logs:CreateLogGroup"
                          - "logs:CreateLogStream"
                          - "logs:PutLogEvents"
                      Resource: !Join [ "", ["arn", ":",  Ref: "AWS::Partition", ":", "logs:", Ref: "AWS::Region", ":", Ref: "AWS::AccountId", ":log-group:/aws/lambda/serverless-video-transcode-admin-service:*" ]]
                    - Effect: "Allow"
                      Action:
                          - "dynamodb:BatchGetItem"
                          - "dynamodb:BatchWriteItem"
                          - "dynamodb:DeleteItem"
                          - "dynamodb:GetItem"
                          - "dynamodb:PutItem"
                          - "dynamodb:Query"
                          - "dynamodb:Scan"
                          - "dynamodb:UpdateItem"
                      Resource:
                          - !Join [ "", ["arn", ":",  Ref: "AWS::Partition", ":", "dynamodb:", Ref: "AWS::Region", ":", Ref: "AWS::AccountId", ":table/serverless-video-transcode-settings"]]
                          - !Join [ "", ["arn", ":",  Ref: "AWS::Partition", ":", "dynamodb:", Ref: "AWS::Region", ":", Ref: "AWS::AccountId", ":table/serverless-video-transcode-keys" ]]
                    - Effect: "Allow"
                      Action:
                          - "lambda:InvokeFunction"
                      Resource:
                          - Fn::GetAtt:
                                - "ServerlessVideoTranscodeLoggingService"
                                - "Arn"
                    - Effect: "Allow"
                      Action:
                          - "kms:Encrypt"
                          - "kms:Decrypt"
                          - "kms:ReEncrypt*"
                          - "kms:GenerateDataKey*"
                          - "kms:DescribeKey"
                      Resource:
                          Fn::GetAtt:
                              - "ServerlessVideoTranscodeKmsKey"
                              - "Arn"
            Roles:
                - Ref: "ServerlessVideoTranscodeAdminRole"

    ServerlessVideoTranscodeAdminService:
        Type: "AWS::Lambda::Function"
        Metadata:
            cfn_nag:
                rules_to_suppress:
                -   id: W58
                    reason: "To be added later"
        Properties:
            Code:
                S3Bucket: !Ref SourceS3Bucket
                S3Key:
                    !Join ["/", [!Ref SourceKeyPrefix, "serverless-video-transcode-admin-service.zip"]]
            Description: "A Serverless Video Transcode microservice function for admin functionality"
            FunctionName: "serverless-video-transcode-admin-service"
            Handler: "index.handler"
            MemorySize: "256"
            Role:
                Fn::GetAtt:
                    - "ServerlessVideoTranscodeAdminRole"
                    - "Arn"
            Runtime: "nodejs12.x"
            Timeout: "60"
            Environment:
                Variables:
                    FEDERATED_LOGIN: !Ref "FederatedLogin"

    ServerlessVideoTranscodeSearchRole:
        Type: "AWS::IAM::Role"
        Metadata:
            cfn_nag:
                rules_to_suppress:
                    - id: W28
                      reason: "Explicit names to avoid cyclic dependency with policy creation, easy refeerncing and better readability of code"
        Properties:
            RoleName: !Join ["-", ["serverless-video-transcode-search-role", Ref: "AWS::Region"]]
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    - Effect: "Allow"
                      Principal:
                          Service:
                              - "lambda.amazonaws.com"
                      Action:
                          - "sts:AssumeRole"
            Path: "/"

    ServerlessVideoTranscodeSearchPolicy:
        Type: "AWS::IAM::ManagedPolicy"
        Metadata:
            cfn_nag:
                rules_to_suppress:
                -   id: W13
                    reason: "The resource names under serverless-video-transcode are not known during cfn execution"
        Properties:
            Description: "Serverless Video Transcode policy for the search microservice Lambda function."
            PolicyDocument:
                Version: "2012-10-17"
                Statement:
                    - Effect: "Allow"
                      Action:
                          - "logs:CreateLogGroup"
                          - "logs:CreateLogStream"
                          - "logs:PutLogEvents"
                      Resource:
                          !Join ["", ["arn", ":",  Ref: "AWS::Partition", ":", "logs:", Ref: "AWS::Region", ":", Ref: "AWS::AccountId", ":log-group:/aws/lambda/serverless-video-transcode-search-service:*" ]]
                    - Effect: "Allow"
                      Action:
                          - "es:ESHttpPost"
                          - "es:ESHttpDelete"
                          - "es:ESHttpPut"
                          - "es:ESHttpGet"
                      Resource:
                          !Join [ "", [ "arn", ":",  Ref: "AWS::Partition", ":", "es:", Ref: "AWS::Region", ":", Ref: "AWS::AccountId", ":domain/serverless-video-transcode/*" ]]
                    - Effect: "Allow"
                      Action:
                          - "dynamodb:GetItem"
                          - "dynamodb:Query"
                          - "dynamodb:Scan"
                      Resource: "*"
                    - Effect: "Allow"
                      Action:
                          - "dynamodb:GetItem"
                      Resource:
                          - !Join [ "", [ "arn", ":",  Ref: "AWS::Partition", ":", "dynamodb:", Ref: "AWS::Region", ":", Ref: "AWS::AccountId", ":table/serverless-video-transcode-packages" ]]
                    - Effect: "Allow"
                      Action:
                          - "lambda:InvokeFunction"
                      Resource:
                          - Fn::GetAtt:
                                - "ServerlessVideoTranscodeAdminService"
                                - "Arn"
                          - Fn::GetAtt:
                                - "ServerlessVideoTranscodeLoggingService"
                                - "Arn"
                    - Effect: "Allow"
                      Action:
                          - "glue:GetTables"
                      # At the time of writing this service does not have ARNs, so * will be used
                      Resource: "*"
            Roles:
                - Ref: "ServerlessVideoTranscodeSearchRole"

    ServerlessVideoTranscodeSearchService:
        Type: "AWS::Lambda::Function"
        Metadata:
            cfn_nag:
                rules_to_suppress:
                -   id: W58
                    reason: "To be added later"
        Properties:
            Code:
                S3Bucket: !Ref SourceS3Bucket
                S3Key: !Join ["/", [!Ref SourceKeyPrefix, "serverless-video-transcode-search-service.zip" ]]
            Description: "A Serverless Video Transcode microservice function for interacting with the elasticsearch cluster"
            FunctionName: "serverless-video-transcode-search-service"
            Handler: "index.handler"
            MemorySize: "256"
            Role:
                Fn::GetAtt:
                    - "ServerlessVideoTranscodeSearchRole"
                    - "Arn"
            Runtime: "nodejs12.x"
            Timeout: "60"
            Environment:
                Variables:
                    FEDERATED_LOGIN: !Ref "FederatedLogin"

    ServerlessVideoTranscodeGlueCrawlerEventRule:
        Type: "AWS::Events::Rule"
        Properties:
            Description: "ServerlessVideoTranscodeSearchService is invoked when an AWS Glue crawler finishes successfully."
            EventPattern:
                source:
                    - "aws.glue"
                detail-type:
                    - "Glue Crawler State Change"
                detail:
                    state:
                        - "Succeeded"
            State: "ENABLED"
            Targets:
                - Arn:
                      Fn::GetAtt:
                          - "ServerlessVideoTranscodeSearchService"
                          - "Arn"
                  Id: !Join [ "-", [ "serverless-video-transcode-glue-crawler-event-rule", Ref: "AWS::Region"]]

    PermissionForEventsToInvokeLambda:
        Type: "AWS::Lambda::Permission"
        Properties:
            FunctionName:
                Ref: "ServerlessVideoTranscodeSearchService"
            Action: "lambda:InvokeFunction"
            Principal: "events.amazonaws.com"
            SourceArn:
                Fn::GetAtt:
                    - "ServerlessVideoTranscodeGlueCrawlerEventRule"
                    - "Arn"

    ServerlessVideoTranscodeManifestRole:
        Type: "AWS::IAM::Role"
        Metadata:
            cfn_nag:
                rules_to_suppress:
                    - id: W28
                      reason: "Explicit names to avoid cyclic dependency with policy creation, easy referencing and better readability of code"
        Properties:
            RoleName:
                !Join ["-", ["serverless-video-transcode-manifest-role", Ref: "AWS::Region"]]
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    - Effect: "Allow"
                      Principal:
                          Service:
                              - "lambda.amazonaws.com"
                      Action:
                          - "sts:AssumeRole"
            Path: "/"

    ServerlessVideoTranscodeManifestPolicy:
        Type: "AWS::IAM::ManagedPolicy"
        Properties:
            Description: "Serverless Video Transcode policy for the manifest microservice Lambda function."
            PolicyDocument:
                Version: "2012-10-17"
                Statement:
                    - Effect: "Allow"
                      Action:
                          - "logs:CreateLogGroup"
                          - "logs:CreateLogStream"
                          - "logs:PutLogEvents"
                      Resource:
                          !Join [ "", ["arn", ":",  Ref: "AWS::Partition", ":", "logs:", Ref: "AWS::Region", ":", Ref: "AWS::AccountId", ":log-group:/aws/lambda/serverless-video-transcode-manifest-service:*" ]]
                    - Effect: "Allow"
                      Action:
                          - "dynamodb:BatchGetItem"
                          - "dynamodb:BatchWriteItem"
                          - "dynamodb:DeleteItem"
                          - "dynamodb:GetItem"
                          - "dynamodb:PutItem"
                          - "dynamodb:Query"
                          - "dynamodb:Scan"
                          - "dynamodb:UpdateItem"
                      Resource:
                          - !Join [ "", [ "arn", ":",  Ref: "AWS::Partition", ":", "dynamodb:", Ref: "AWS::Region", ":", Ref: "AWS::AccountId", ":table/serverless-video-transcode-settings" ]]
                          - !Join [ "", [ "arn", ":",  Ref: "AWS::Partition", ":", "dynamodb:", Ref: "AWS::Region", ":", Ref: "AWS::AccountId", ":table/serverless-video-transcode-cart" ]]
                          - !Join [ "", [ "arn", ":",  Ref: "AWS::Partition", ":", "dynamodb:", Ref: "AWS::Region", ":", Ref: "AWS::AccountId", ":table/serverless-video-transcode-datasets" ]]
                    - Effect: "Allow"
                      Action:
                          - "lambda:InvokeFunction"
                      Resource:
                          - Fn::GetAtt:
                                - "ServerlessVideoTranscodeAdminService"
                                - "Arn"
                    - Effect: "Allow"
                      Action:
                          - "s3:GetObject"
                      Resource:
                          - !Join ["", ["arn", ":",  Ref: "AWS::Partition", ":", "s3:::*"]]
                    - Effect: "Allow"
                      Action:
                          - "s3:ListBucket"
                          - "s3:PutObject"
                      Resource:
                          - !Join ["", [ "arn", ":",  Ref: "AWS::Partition", ":", "s3:::serverless-video-transcode-", Ref: "AWS::Region", "-", Ref: "AWS::AccountId", "/*" ]]
                          - !Join ["", [ "arn", ":",  Ref: "AWS::Partition", ":", "s3:::serverless-video-transcode-", Ref: "AWS::Region", "-", Ref: "AWS::AccountId" ]]
                    - Effect: "Allow"
                      Action:
                          - "kms:Encrypt"
                          - "kms:Decrypt"
                          - "kms:ReEncrypt*"
                          - "kms:GenerateDataKey*"
                          - "kms:DescribeKey"
                      Resource:
                          Fn::GetAtt:
                              - "ServerlessVideoTranscodeKmsKey"
                              - "Arn"
            Roles:
                - Ref: "ServerlessVideoTranscodeManifestRole"

    ServerlessVideoTranscodeManifestService:
        Type: "AWS::Lambda::Function"
        Metadata:
            cfn_nag:
                rules_to_suppress:
                -   id: W58
                    reason: "To be added later"
        Properties:
            Code:
                S3Bucket: !Ref SourceS3Bucket
                S3Key:  !Join ["/", [!Ref SourceKeyPrefix, "serverless-video-transcode-manifest-service.zip" ]]
            Description: "A Serverless Video Transcode microservice function for manifest functionality"
            FunctionName: "serverless-video-transcode-manifest-service"
            Handler: "index.handler"
            MemorySize: "256"
            Role:
                Fn::GetAtt:
                    - "ServerlessVideoTranscodeManifestRole"
                    - "Arn"
            Runtime: "nodejs12.x"
            Timeout: "300"

    ServerlessVideoTranscodeCartRole:
        Type: "AWS::IAM::Role"
        Metadata:
            cfn_nag:
                rules_to_suppress:
                  - id: W28
                    reason: "Explicit names to avoid cyclic dependency with policy creation and referencing, easy referencing and better readability of code"
        Properties:
            RoleName: !Join ["-", ["serverless-video-transcode-cart-role", Ref: "AWS::Region"]]
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    - Effect: "Allow"
                      Principal:
                          Service:
                              - "lambda.amazonaws.com"
                      Action:
                          - "sts:AssumeRole"
            Path: "/"

    ServerlessVideoTranscodeCartPolicy:
        Type: "AWS::IAM::ManagedPolicy"
        Properties:
            Description: "Serverless Video Transcode policy for the cart microservice Lambda function."
            PolicyDocument:
                Version: "2012-10-17"
                Statement:
                    - Effect: "Allow"
                      Action:
                          - "logs:CreateLogGroup"
                          - "logs:CreateLogStream"
                          - "logs:PutLogEvents"
                      Resource:
                          !Join [ "", ["arn", ":",  Ref: "AWS::Partition", ":", "logs:", Ref: "AWS::Region", ":", Ref: "AWS::AccountId", ":log-group:/aws/lambda/serverless-video-transcode-cart-service:*" ]]
                    - Effect: "Allow"
                      Action:
                          - "dynamodb:BatchGetItem"
                          - "dynamodb:BatchWriteItem"
                          - "dynamodb:DeleteItem"
                          - "dynamodb:GetItem"
                          - "dynamodb:PutItem"
                          - "dynamodb:Query"
                          - "dynamodb:Scan"
                          - "dynamodb:UpdateItem"
                      Resource:
                          - !Join [ "", [ "arn", ":",  Ref: "AWS::Partition", ":", "dynamodb:", Ref: "AWS::Region", ":", Ref: "AWS::AccountId", ":table/serverless-video-transcode-settings" ]]
                          - !Join [ "", [ "arn", ":",  Ref: "AWS::Partition", ":", "dynamodb:", Ref: "AWS::Region", ":", Ref: "AWS::AccountId", ":table/serverless-video-transcode-cart" ]]
                          - !Join [ "", [ "arn", ":",  Ref: "AWS::Partition", ":", "dynamodb:", Ref: "AWS::Region", ":", Ref: "AWS::AccountId", ":table/serverless-video-transcode-packages" ]]
                    - Effect: "Allow"
                      Action:
                          - "lambda:InvokeFunction"
                      Resource:
                          - Fn::GetAtt:
                            - "ServerlessVideoTranscodeAdminService"
                            - "Arn"
                          - Fn::GetAtt:
                            - "ServerlessVideoTranscodeLoggingService"
                            - "Arn"
                          - Fn::GetAtt:
                            - "ServerlessVideoTranscodeManifestService"
                            - "Arn"
            Roles:
                - Ref: "ServerlessVideoTranscodeCartRole"

    ServerlessVideoTranscodeCartService:
        Type: "AWS::Lambda::Function"
        Metadata:
            cfn_nag:
                rules_to_suppress:
                -   id: W58
                    reason: "To be added later"
        Properties:
            Code:
                S3Bucket: !Ref SourceS3Bucket
                S3Key: !Join [ "/", [!Ref SourceKeyPrefix, "serverless-video-transcode-cart-service.zip" ]]
            Description: "A Serverless Video Transcode microservice function for cart functionality"
            FunctionName: "serverless-video-transcode-cart-service"
            Handler: "index.handler"
            MemorySize: "256"
            Role:
                Fn::GetAtt:
                    - "ServerlessVideoTranscodeCartRole"
                    - "Arn"
            Runtime: "nodejs12.x"
            Timeout: "60"
            Environment:
                Variables:
                    FEDERATED_LOGIN: !Ref "FederatedLogin"

    ServerlessVideoTranscodePackageCrawlerRole:
        Type: "AWS::IAM::Role"
        Metadata:
            cfn_nag:
                rules_to_suppress:
                  - id: W28
                    reason: "Explicit name to avoid cyclic dependency with policy creation, easy referencing  and better readability of code" 
        Properties:
            RoleName: !Join [ "-", ["serverless-video-transcode-package-crawler-role", Ref: "AWS::Region" ]]
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    - Effect: "Allow"
                      Principal:
                          Service:
                              - "glue.amazonaws.com"
                      Action:
                          - "sts:AssumeRole"
            Path: "/"

    ServerlessVideoTranscodePackageCrawlerPolicy:
        Type: "AWS::IAM::ManagedPolicy"
        Metadata:
            cfn_nag:
                rules_to_suppress:
                -   id: F5
                    reason: "Crawler requires a range of actions to be performed through glue and hence '*'"
                -   id: W13
                    reason: "Exact resource names are not known at the time of cfn exection, hence '*'"
        Properties:
            Description: "Serverless Video Transcode policy for the package crawler."
            PolicyDocument:
                Version: "2012-10-17"
                Statement:
                    - Effect: "Allow"
                      Action:
                          - "glue:*"
                          - "s3:GetBucketLocation"
                          - "s3:ListBucket"
                          - "s3:ListAllMyBuckets"
                          - "s3:GetBucketAcl"
                          - "ec2:DescribeVpcEndpoints"
                          - "ec2:DescribeRouteTables"
                          - "ec2:CreateNetworkInterface"
                          - "ec2:DeleteNetworkInterface"
                          - "ec2:DescribeNetworkInterfaces"
                          - "ec2:DescribeSecurityGroups"
                          - "ec2:DescribeSubnets"
                          - "ec2:DescribeVpcAttribute"
                          - "iam:ListRolePolicies"
                          - "iam:GetRole"
                          - "iam:GetRolePolicy"
                      Resource: "*"
                    - Effect: "Allow"
                      Action:
                          - "s3:CreateBucket"
                      Resource:
                          - !Join ["", ["arn", ":",  Ref: "AWS::Partition", ":", "s3:::aws-glue-*"]]
                    - Effect: "Allow"
                      Action:
                          - "s3:GetObject"
                          - "s3:PutObject"
                          - "s3:DeleteObject"
                      Resource:
                          - !Join ["", ["arn", ":",  Ref: "AWS::Partition", ":", "s3:::aws-glue-*/*"]]
                          - !Join ["", ["arn", ":",  Ref: "AWS::Partition", ":", "s3:::*/*aws-glue-*/*"]]
                    - Effect: "Allow"
                      Action:
                          - "s3:GetObject"
                      Resource:
                          - !Join ["", ["arn", ":",  Ref: "AWS::Partition", ":", "s3:::crawler-public*"]]
                          - !Join ["", ["arn", ":",  Ref: "AWS::Partition", ":", "s3:::glue-*"]]
                    - Effect: "Allow"
                      Action:
                          - "logs:CreateLogGroup"
                          - "logs:CreateLogStream"
                          - "logs:PutLogEvents"
                      Resource:
                          - !Join ["", ["arn", ":",  Ref: "AWS::Partition", ":", "logs:*:*:/aws-glue/*"]]
                    - Effect: "Allow"
                      Action:
                          - "ec2:CreateTags"
                          - "ec2:DeleteTags"
                      Resource:
                          - !Join ["", ["arn", ":",  Ref: "AWS::Partition", ":", "ec2:*:*:network-interface/*"]]
                          - !Join ["", ["arn", ":",  Ref: "AWS::Partition", ":", "ec2:*:*:security-group/*"]]
                          - !Join ["", ["arn", ":",  Ref: "AWS::Partition", ":", "ec2:*:*:instance/*"]]
                      Condition:
                          ForAllValues:StringEquals:
                              aws:TagKeys: "aws-glue-service-resource"
                    - Effect: "Allow"
                      Action:
                          - "kms:Decrypt"
                      Resource:
                          Fn::GetAtt:
                              - "ServerlessVideoTranscodeKmsKey"
                              - "Arn"
                    - Effect: "Allow"
                      Action:
                          - "s3:ListBucket"
                          - "s3:GetObject"
                      Resource:
                          - !Join [ "", [ "arn", ":",  Ref: "AWS::Partition", ":", "s3:::serverless-video-transcode-", Ref: "AWS::Region", "-", Ref: "AWS::AccountId", "/*" ]]
            Roles:
                - Ref: "ServerlessVideoTranscodePackageCrawlerRole"

    ServerlessVideoTranscodePackagesRole:
        Type: "AWS::IAM::Role"
        Metadata:
            cfn_nag:
                rules_to_suppress:
                    - id: W28
                      reason: "Explicit names to avoid cyclic dependency, easy referencing and better readability of code"
        Properties:
            RoleName:
                !Join ["-", ["serverless-video-transcode-packages-role", Ref: "AWS::Region"]]
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    - Effect: "Allow"
                      Principal:
                          Service:
                              - "lambda.amazonaws.com"
                      Action:
                          - "sts:AssumeRole"
            Path: "/"

    ServerlessVideoTranscodePackagesPolicy:
        Type: "AWS::IAM::ManagedPolicy"
        Metadata:
            cfn_nag:
                rules_to_suppress:
                -   id: W13
                    reason: "Exact resource names are not known at the time of cfn exection"
        Properties:
            Description: "Serverless Video Transcode policy for the package microservice Lambda function."
            PolicyDocument:
                Version: "2012-10-17"
                Statement:
                    - Effect: "Allow"
                      Action:
                          - "logs:CreateLogGroup"
                          - "logs:CreateLogStream"
                          - "logs:PutLogEvents"
                      Resource:
                          !Join [ "", ["arn", ":",  Ref: "AWS::Partition", ":", "logs:", Ref: "AWS::Region", ":", Ref: "AWS::AccountId", ":log-group:/aws/lambda/serverless-video-transcode-package-service:*" ]]
                    - Effect: "Allow"
                      Action:
                          - "dynamodb:BatchGetItem"
                          - "dynamodb:BatchWriteItem"
                          - "dynamodb:DeleteItem"
                          - "dynamodb:GetItem"
                          - "dynamodb:PutItem"
                          - "dynamodb:Query"
                          - "dynamodb:Scan"
                          - "dynamodb:UpdateItem"
                      Resource:
                          - !Join [ "", [ "arn", ":",  Ref: "AWS::Partition", ":", "dynamodb:", Ref: "AWS::Region", ":", Ref: "AWS::AccountId", ":table/serverless-video-transcode-packages" ]]
                          - !Join [ "", [ "arn", ":",  Ref: "AWS::Partition", ":", "dynamodb:", Ref: "AWS::Region", ":", Ref: "AWS::AccountId", ":table/serverless-video-transcode-datasets" ]]
                          - !Join [ "", [ "arn", ":",  Ref: "AWS::Partition", ":", "dynamodb:", Ref: "AWS::Region", ":", Ref: "AWS::AccountId", ":table/serverless-video-transcode-metadata" ]]
                          - !Join [ "", [ "arn", ":",  Ref: "AWS::Partition", ":", "dynamodb:", Ref: "AWS::Region", ":", Ref: "AWS::AccountId", ":table/serverless-video-transcode-settings" ]]
                    - Effect: "Allow"
                      Action:
                          - "lambda:InvokeFunction"
                      Resource: "*"
                    - Effect: "Allow"
                      Action:
                          - "s3:ListBucket"
                          - "s3:GetObject"
                          - "s3:DeleteObject"
                          - "s3:PutObject"
                      Resource:
                          - !Join [ "", [ "arn", ":",  Ref: "AWS::Partition", ":", "s3:::serverless-video-transcode-", Ref: "AWS::Region", "-", Ref: "AWS::AccountId", "/*" ]]
                          - !Join [ "", [ "arn", ":",  Ref: "AWS::Partition", ":", "s3:::serverless-video-transcode-", Ref: "AWS::Region", "-", Ref: "AWS::AccountId", ]]
                    - Effect: "Allow"
                      Action:
                          - "kms:Encrypt"
                          - "kms:Decrypt"
                          - "kms:ReEncrypt*"
                          - "kms:GenerateDataKey*"
                          - "kms:DescribeKey"
                      Resource:
                          Fn::GetAtt:
                              - "ServerlessVideoTranscodeKmsKey"
                              - "Arn"
                    - Effect: "Allow"
                      Action:
                          - "glue:CreateDatabase"
                          - "glue:DeleteDatabase"
                          - "glue:GetDatabase"
                          - "glue:GetDatabases"
                          - "glue:UpdateDatabase"
                          - "glue:CreateTable"
                          - "glue:DeleteTable"
                          - "glue:BatchDeleteTable"
                          - "glue:UpdateTable"
                          - "glue:GetTable"
                          - "glue:GetTables"
                          - "glue:BatchCreatePartition"
                          - "glue:CreatePartition"
                          - "glue:DeletePartition"
                          - "glue:BatchDeletePartition"
                          - "glue:UpdatePartition"
                          - "glue:GetPartition"
                          - "glue:GetPartitions"
                          - "glue:BatchGetPartition"
                          - "glue:DeleteCrawler"
                          - "glue:StartCrawler"
                          - "glue:StartCrawlerSchedule"
                          - "glue:StopCrawler"
                          - "glue:StopCrawlerSchedule"
                          - "glue:CreateCrawler"
                          - "glue:GetCrawler"
                          - "glue:UpdateCrawler"
                      # At the time of writing this service does not have ARNs, so * will be used
                      Resource: "*"
                    - Effect: "Allow"
                      Action:
                          - "athena:CancelQueryExecution"
                          - "athena:GetCatalogs"
                          - "athena:GetExecutionEngine"
                          - "athena:GetExecutionEngines"
                          - "athena:GetNamespace"
                          - "athena:GetNamespaces"
                          - "athena:GetQueryExecution"
                          - "athena:GetQueryExecutions"
                          - "athena:GetQueryResults"
                          - "athena:GetTable"
                          - "athena:GetTables"
                          - "athena:RunQuery"
                          - "athena:StartQueryExecution"
                          - "athena:StopQueryExecution"
                      # At the time of writing this service does not have ARNs, so * will be used
                      Resource: "*"
                    - Effect: "Allow"
                      Action:
                          - "s3:GetBucketLocation"
                          - "s3:GetObject"
                          - "s3:ListBucket"
                          - "s3:ListBucketMultipartUploads"
                          - "s3:ListMultipartUploadParts"
                          - "s3:AbortMultipartUpload"
                          - "s3:CreateBucket"
                          - "s3:PutObject"
                      Resource: !Join ["", ["arn", ":",  Ref: "AWS::Partition", ":", "s3:::aws-athena-query-results-*"]]
                    - Effect: "Allow"
                      Action:
                          - "iam:PassRole"
                      Resource:
                          Fn::GetAtt:
                              - "ServerlessVideoTranscodePackageCrawlerRole"
                              - "Arn"
            Roles:
                - Ref: "ServerlessVideoTranscodePackagesRole"

    ServerlessVideoTranscodePackagesService:
        Type: "AWS::Lambda::Function"
        Metadata:
            cfn_nag:
                rules_to_suppress:
                -   id: W58
                    reason: "To be added later"
        Properties:
            Code:
                S3Bucket: !Ref SourceS3Bucket
                S3Key: !Join [ "/",  [!Ref SourceKeyPrefix, "serverless-video-transcode-package-service.zip" ]]
            Description: "A Serverless Video Transcode microservice function for package functionality"
            FunctionName: "serverless-video-transcode-package-service"
            Handler: "index.handler"
            MemorySize: "256"
            Role:
                Fn::GetAtt:
                    - "ServerlessVideoTranscodePackagesRole"
                    - "Arn"
            Runtime: "nodejs12.x"
            Timeout: "300"
            Environment:
                Variables:
                    CRAWLER_ROLE_ARN: !GetAtt
                        - ServerlessVideoTranscodePackageCrawlerRole
                        - Arn
                    ACCOUNT_ID: !Ref "AWS::AccountId"
                    FEDERATED_LOGIN: !Ref "FederatedLogin"

    ServerlessVideoTranscodeProfileRole:
        Type: "AWS::IAM::Role"
        Metadata:
            cfn_nag:
                rules_to_suppress:
                   - id: W28
                     reason: "Explicit name avoids cyclic dependency, easy referencing and better readability"
        Properties:
            RoleName:
                !Join ["-", ["serverless-video-transcode-profile-role", Ref: "AWS::Region"]]
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    - Effect: "Allow"
                      Principal:
                          Service:
                              - "lambda.amazonaws.com"
                      Action:
                          - "sts:AssumeRole"
            Path: "/"

    ServerlessVideoTranscodeProfilePolicy:
        Type: "AWS::IAM::ManagedPolicy"
        Metadata:
            cfn_nag:
                rules_to_suppress:
                -   id: F5
                    reason: "This policy manages user profiles in Cognito and hence requires full access"
        Properties:
            Description: "Serverless Video Transcode policy for the profile microservice Lambda function."
            PolicyDocument:
                Version: "2012-10-17"
                Statement:
                    - Effect: "Allow"
                      Action:
                          - "logs:CreateLogGroup"
                          - "logs:CreateLogStream"
                          - "logs:PutLogEvents"
                      Resource: !Join [ "", [ "arn", ":",  Ref: "AWS::Partition", ":", "logs:", Ref: "AWS::Region", ":", Ref: "AWS::AccountId", ":log-group:/aws/lambda/serverless-video-transcode-profile-service:*" ]]
                    - Effect: "Allow"
                      Action:
                          - "dynamodb:GetItem"
                          - "dynamodb:Query"
                          - "dynamodb:Scan"
                      Resource: 
                          - !Join [ "", [ "arn", ":",  Ref: "AWS::Partition", ":", "dynamodb:", Ref: "AWS::Region", ":", Ref: "AWS::AccountId", ":table/serverless-video-transcode-settings" ]]
                    - Effect: "Allow"
                      Action:
                          - "lambda:InvokeFunction"
                      Resource:
                          - Fn::GetAtt:
                                - "ServerlessVideoTranscodeAdminService"
                                - "Arn"
                          - Fn::GetAtt:
                                - "ServerlessVideoTranscodeLoggingService"
                                - "Arn"
                    - Effect: "Allow"
                      Action:
                          - "kms:Encrypt"
                          - "kms:Decrypt"
                          - "kms:ReEncrypt*"
                          - "kms:GenerateDataKey*"
                          - "kms:DescribeKey"
                      Resource:
                          Fn::GetAtt:
                              - "ServerlessVideoTranscodeKmsKey"
                              - "Arn"
            Roles:
                - Ref: "ServerlessVideoTranscodeProfileRole"

    ServerlessVideoTranscodeProfileService:
        Type: "AWS::Lambda::Function"
        Metadata:
            cfn_nag:
                rules_to_suppress:
                -   id: W58
                    reason: "To be added later"
        Properties:
            Code:
                S3Bucket: !Ref SourceS3Bucket
                S3Key: !Join [ "/", [ !Ref SourceKeyPrefix, "serverless-video-transcode-profile-service.zip" ]]
            Description: "A Serverless Video Transcode microservice function for profile functionality"
            FunctionName: "serverless-video-transcode-profile-service"
            Handler: "index.handler"
            MemorySize: "256"
            Role:
                Fn::GetAtt:
                    - "ServerlessVideoTranscodeProfileRole"
                    - "Arn"
            Runtime: "nodejs12.x"
            Timeout: "300"
            Environment:
                Variables:
                    FEDERATED_LOGIN: !Ref "FederatedLogin"

    ServerlessVideoTranscodeAuthorizerRole:
        Type: "AWS::IAM::Role"
        Metadata:
            cfn_nag:
                rules_to_suppress:
                    - id: W28
                      reason: "Explicit name to avoid cyclic dependency, easy referencing and better readability"
        Properties:
            RoleName:
                !Join ["-", ["serverless-video-transcode-authorizer-role", Ref: "AWS::Region"]]
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    - Effect: "Allow"
                      Principal:
                          Service:
                              - "lambda.amazonaws.com"
                      Action:
                          - "sts:AssumeRole"
            Path: "/"

    ServerlessVideoTranscodeAuthorizerPolicy:
        Type: "AWS::IAM::ManagedPolicy"
        Metadata:
            cfn_nag:
                rules_to_suppress:
                -   id: F5
                    reason: "This policy performs authorization with Cognito and hence '*' access"
        Properties:
            Description: "Serverless Video Transcode policy for the authorizer microservice Lambda function."
            PolicyDocument:
                Version: "2012-10-17"
                Statement:
                    - Effect: "Allow"
                      Action:
                          - "logs:CreateLogGroup"
                          - "logs:CreateLogStream"
                          - "logs:PutLogEvents"
                      Resource: !Join [ "", [ "arn", ":",  Ref: "AWS::Partition", ":", "logs:", Ref: "AWS::Region", ":", Ref: "AWS::AccountId", ":log-group:/aws/lambda/serverless-video-transcode-authorizer:*" ]]
                    - Effect: "Allow"
                      Action:
                          - "dynamodb:GetItem"
                          - "dynamodb:Query"
                      Resource:
                          - !Join [ "", [ "arn", ":",  Ref: "AWS::Partition", ":", "dynamodb:", Ref: "AWS::Region", ":", Ref: "AWS::AccountId", ":table/serverless-video-transcode-settings" ]]
                          - !Join [ "", [ "arn", ":",  Ref: "AWS::Partition", ":", "dynamodb:", Ref: "AWS::Region", ":", Ref: "AWS::AccountId", ":table/serverless-video-transcode-keys" ]]
                    - Effect: "Allow"
                      Action:
                          - "kms:Encrypt"
                          - "kms:Decrypt"
                          - "kms:ReEncrypt*"
                          - "kms:GenerateDataKey*"
                          - "kms:DescribeKey"
                      Resource:
                          Fn::GetAtt:
                              - "ServerlessVideoTranscodeKmsKey"
                              - "Arn"
            Roles:
                - Ref: "ServerlessVideoTranscodeAuthorizerRole"

    ServerlessVideoTranscodeAuthorizerService:
        Type: "AWS::Lambda::Function"
        Metadata:
            cfn_nag:
                rules_to_suppress:
                -   id: W58
                    reason: "To be added later"
        Properties:
            Code:
                S3Bucket: !Ref SourceS3Bucket
                S3Key: !Join [ "/", [!Ref SourceKeyPrefix, "serverless-video-transcode-authorizer.zip" ]]
            Description: "A Serverless Video Transcode microservice function for custom authorizer functionality"
            FunctionName: "serverless-video-transcode-authorizer"
            Handler: "index.handler"
            MemorySize: "256"
            Role:
                Fn::GetAtt:
                    - "ServerlessVideoTranscodeAuthorizerRole"
                    - "Arn"
            Runtime: "nodejs12.x"
            Timeout: "60"

Outputs:
    AuthorizerArn:
        Description: "ARN of Serverless Video Transcode API Gateway custom authorizer function"
        Value: !GetAtt ServerlessVideoTranscodeAuthorizerService.Arn
    AdminArn:
        Description: "ARN of Serverless Video Transcode admin services function"
        Value: !GetAtt ServerlessVideoTranscodeAdminService.Arn
    CartArn:
        Description: "ARN of Serverless Video Transcode cart services function"
        Value: !GetAtt ServerlessVideoTranscodeCartService.Arn
    ProfileArn:
        Description: "ARN of Serverless Video Transcode profile services function"
        Value: !GetAtt ServerlessVideoTranscodeProfileService.Arn
    SearchArn:
        Description: "ARN of Serverless Video Transcode search services function"
        Value: !GetAtt ServerlessVideoTranscodeSearchService.Arn
    PackageArn:
        Description: "ARN of Serverless Video Transcode package services function"
        Value: !GetAtt ServerlessVideoTranscodePackagesService.Arn
