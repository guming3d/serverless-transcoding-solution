AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'The AWS CloudFormation template for deployment of the AWS Serverless Video Transcode transcode related resources'

Metadata:
  AWS::ServerlessRepo::Application:
    Name: serverless-video-transcoder
    Description: Serverless Video Transcoder
    Author: Harold Sun
    SpdxLicenseId: Apache-2.0
    LicenseUrl: s3://serverless-video-transcoder-cn-north-1/assets/2b42edef8fa55315f34f2370b4715ca9
    ReadmeUrl: s3://serverless-video-transcoder-cn-north-1/assets/896ebbdc2d03da0447c67e83ce8cd1ac
    Labels:
    - S3
    - Lambda
    - Step_Functions
    - EFS
    - Video
    - Transcode
    HomePageUrl: https://github.com/bnusunny/serverless-video-transcoder
    SemanticVersion: '0.0.2'
    SourceCodeUrl: https://github.com/bnusunny/serverless-video-transcoder
Parameters:
  EnvironmentName:
    Description: An environment name that is prefixed to resource names
    Type: String
    Default: Dev
  VpcCIDR:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    Default: 10.192.0.0/16
  PublicSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in
      the first Availability Zone
    Type: String
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    Default: 10.192.0.0/20
  PublicSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in
      the second Availability Zone
    Type: String
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    Default: 10.192.16.0/20
  VideosBucketName:
    Type: String
    Description: 'REQUIRED: Unique S3 bucket name to use for the app.'
  EFSpath:
    Type: String
    Default: /mnt/efs
Globals:
  Function:
    Timeout: 30
    Runtime: python3.7
    MemorySize: 512
    Tracing: Active
    Layers:
    - Fn::Sub: arn:${AWS::Partition}:lambda:${AWS::Region}:488211338238:layer:LambdaInsightsExtension:4
Resources:
  ServerlessVideoTranscodeTriggerRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName:
        !Join [ "-", [ "serverless-video-transcode-trigger-role", Ref: "AWS::Region" ] ]
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
  ServerlessVideoTranscodeDDBPolicy:
    Type: "AWS::IAM::ManagedPolicy"
    Properties:
      Description: "Serverless Video Transcode policy for transcode Lambda function."
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action:
              - "dynamodb:BatchGetItem"
              - "dynamodb:BatchWriteItem"
              - "dynamodb:DeleteItem"
              - "dynamodb:GetItem"
              - "dynamodb:PutItem"
              - "dynamodb:Query"
              - "dynamodb:Scan"
              - "dynamodb:UpdateItem"
            Resource: "*"
      Roles:
        - Ref: "ServerlessVideoTranscodeTriggerRole"
  VideosBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        Ref: VideosBucketName
  JobTable:
    Type: AWS::Serverless::SimpleTable
  FFmpegLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      ContentUri: s3://serverless-video-transcoder-cn-north-1/assets/b58ac6543eb64e6cefc1bab452d893ca
      CompatibleRuntimes:
      - python3.8
      - python3.7
      - python3.6
  TriggerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://serverless-video-transcoder-cn-north-1/assets/429a76628dfece1d981f316d242a5584
      Handler: app.lambda_handler
      FunctionName: serverless-video-transcode-trigger-transcode
      Policies:
      - S3ReadPolicy:
          BucketName:
            Ref: VideosBucketName
      - DynamoDBWritePolicy:
          TableName:
            Ref: JobTable
      - StepFunctionsExecutionPolicy:
          StateMachineName:
            Fn::GetAtt:
            - MainStateMachine
            - Name
      - CloudWatchLambdaInsightsExecutionRolePolicy
      - AmazonDynamoDBFullAccess
      Environment:
        Variables:
          JOB_TABLE:
            Ref: JobTable
          SFN_ARN:
            Ref: MainStateMachine
          DEFAULT_SEGMENT_TIME: 60
          ENABLE_HLS: 0
      Layers:
      - Ref: FFmpegLayer
      Events:
        S3NewObjectEvent:
          Type: S3
          Properties:
            Bucket:
              Ref: VideosBucket
            Events: s3:ObjectCreated:*
            Filter:
              S3Key:
                Rules:
                - Name: suffix
                  Value: .mp4
                - Name: prefix
                  Value: input/
  MainStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      DefinitionUri:
        Bucket: serverless-video-transcoder-cn-north-1
        Key: assets/545682c6071f3deab46b0e80036d4cce
      Tracing:
        Enabled: true
      DefinitionSubstitutions:
        ControllerFunctionArn:
          Fn::GetAtt:
          - ControllerFunction
          - Arn
        TranscodeVideoFunctionArn:
          Fn::GetAtt:
          - TranscodeVideoFunction
          - Arn
        MergeVideoFunctionArn:
          Fn::GetAtt:
          - MergeVideoFunction
          - Arn
      Policies:
      - CloudWatchPutMetricPolicy: {}
      - CloudWatchLogsFullAccess
      - LambdaInvokePolicy:
          FunctionName:
            Ref: ControllerFunction
      - LambdaInvokePolicy:
          FunctionName:
            Ref: TranscodeVideoFunction
      - LambdaInvokePolicy:
          FunctionName:
            Ref: MergeVideoFunction
      - CloudWatchLambdaInsightsExecutionRolePolicy
      - AWSXRayDaemonWriteAccess
  ControllerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://serverless-video-transcoder-cn-north-1/assets/e4bd751a83108e3b8a8980b817bf043c
      Handler: app.lambda_handler
      MemorySize: 1024
      Timeout: 900
      Environment:
        Variables:
          EFS_PATH:
            Ref: EFSpath
          PARALLEL_GROUPS: 3
          DEFAULT_CONCURENCY: 30
          DEFAULT_SEGMENT_TIME: 30
      Layers:
      - Ref: FFmpegLayer
      Policies:
      - S3ReadPolicy:
          BucketName:
            Ref: VideosBucketName
      - S3WritePolicy:
          BucketName:
            Ref: VideosBucketName
      - EFSWriteAccessPolicy:
          FileSystem:
            Ref: FileSystemResource
          AccessPoint:
            Ref: AccessPointResource
      - CloudWatchLambdaInsightsExecutionRolePolicy
      VpcConfig:
        SecurityGroupIds:
        - Fn::GetAtt:
          - VPC
          - DefaultSecurityGroup
        SubnetIds:
        - Ref: PublicSubnet1
        - Ref: PublicSubnet2
      FileSystemConfigs:
      - Arn:
          Fn::Sub: arn:${AWS::Partition}:elasticfilesystem:${AWS::Region}:${AWS::AccountId}:access-point/${AccessPointResource}
        LocalMountPath:
          Ref: EFSpath
    DependsOn:
    - MountTargetResource1
    - MountTargetResource2
  TranscodeVideoFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://serverless-video-transcoder-cn-north-1/assets/19bdbe4c065bca237fcbb839f50f9602
      Handler: app.lambda_handler
      MemorySize: 3008
      Timeout: 900
      Environment:
        Variables:
          EFS_PATH:
            Ref: EFSpath
      Layers:
      - Ref: FFmpegLayer
      Policies:
      - S3ReadPolicy:
          BucketName:
            Ref: VideosBucketName
      - S3WritePolicy:
          BucketName:
            Ref: VideosBucketName
      - EFSWriteAccessPolicy:
          FileSystem:
            Ref: FileSystemResource
          AccessPoint:
            Ref: AccessPointResource
      - CloudWatchLambdaInsightsExecutionRolePolicy
      VpcConfig:
        SecurityGroupIds:
        - Fn::GetAtt:
          - VPC
          - DefaultSecurityGroup
        SubnetIds:
        - Ref: PublicSubnet1
        - Ref: PublicSubnet2
      FileSystemConfigs:
      - Arn:
          Fn::Sub: arn:${AWS::Partition}:elasticfilesystem:${AWS::Region}:${AWS::AccountId}:access-point/${AccessPointResource}
        LocalMountPath:
          Ref: EFSpath
    DependsOn:
    - MountTargetResource1
    - MountTargetResource2
  MergeVideoFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://serverless-video-transcoder-cn-north-1/assets/00eb9281c255efcf54dc63b225c82d68
      Handler: app.lambda_handler
      MemorySize: 3008
      Timeout: 900
      Environment:
        Variables:
          EFS_PATH:
            Ref: EFSpath
          MEDIA_BUCKET:
            Ref: VideosBucketName
      Layers:
      - Ref: FFmpegLayer
      Policies:
      - S3ReadPolicy:
          BucketName:
            Ref: VideosBucketName
      - S3WritePolicy:
          BucketName:
            Ref: VideosBucketName
      - EFSWriteAccessPolicy:
          FileSystem:
            Ref: FileSystemResource
          AccessPoint:
            Ref: AccessPointResource
      - CloudWatchLambdaInsightsExecutionRolePolicy
      VpcConfig:
        SecurityGroupIds:
        - Fn::GetAtt:
          - VPC
          - DefaultSecurityGroup
        SubnetIds:
        - Ref: PublicSubnet1
        - Ref: PublicSubnet2
      FileSystemConfigs:
      - Arn:
          Fn::Sub: arn:${AWS::Partition}:elasticfilesystem:${AWS::Region}:${AWS::AccountId}:access-point/${AccessPointResource}
        LocalMountPath:
          Ref: EFSpath
    DependsOn:
    - MountTargetResource1
    - MountTargetResource2
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock:
        Ref: VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
      - Key: Name
        Value:
          Ref: EnvironmentName
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value:
          Ref: EnvironmentName
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId:
        Ref: InternetGateway
      VpcId:
        Ref: VPC
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      AvailabilityZone:
        Fn::Select:
        - 0
        - Fn::GetAZs: ''
      CidrBlock:
        Ref: PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value:
          Fn::Sub: ${EnvironmentName} Public Subnet (AZ1)
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      AvailabilityZone:
        Fn::Select:
        - 1
        - Fn::GetAZs: ''
      CidrBlock:
        Ref: PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value:
          Fn::Sub: ${EnvironmentName} Public Subnet (AZ2)
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value:
          Fn::Sub: ${EnvironmentName} Public Routes
  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId:
        Ref: PublicRouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId:
        Ref: InternetGateway
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: PublicRouteTable
      SubnetId:
        Ref: PublicSubnet1
  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: PublicRouteTable
      SubnetId:
        Ref: PublicSubnet2
  EndpointS3:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      RouteTableIds:
      - Ref: PublicRouteTable
      ServiceName:
        Fn::Sub: com.amazonaws.${AWS::Region}.s3
      VpcId:
        Ref: VPC
  EndpointDDB:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      RouteTableIds:
      - Ref: PublicRouteTable
      ServiceName:
        Fn::Sub: com.amazonaws.${AWS::Region}.dynamodb
      VpcId:
        Ref: VPC
  FileSystemResource:
    Type: AWS::EFS::FileSystem
    Properties:
      PerformanceMode: generalPurpose
      LifecyclePolicies:
      - TransitionToIA: AFTER_30_DAYS
  MountTargetResource1:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId:
        Ref: FileSystemResource
      SubnetId:
        Ref: PublicSubnet1
      SecurityGroups:
      - Fn::GetAtt:
        - VPC
        - DefaultSecurityGroup
  MountTargetResource2:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId:
        Ref: FileSystemResource
      SubnetId:
        Ref: PublicSubnet2
      SecurityGroups:
      - Fn::GetAtt:
        - VPC
        - DefaultSecurityGroup
  AccessPointResource:
    Type: AWS::EFS::AccessPoint
    Properties:
      FileSystemId:
        Ref: FileSystemResource
      PosixUser:
        Uid: '1000'
        Gid: '1000'
      RootDirectory:
        CreationInfo:
          OwnerGid: '1000'
          OwnerUid: '1000'
          Permissions: '0755'
        Path: /lambda
Outputs:
  VPC:
    Description: A reference to the created VPC
    Value:
      Ref: VPC
  PublicSubnets:
    Description: A list of the public subnets
    Value:
      Fn::Join:
      - ','
      - - Ref: PublicSubnet1
        - Ref: PublicSubnet2
  PublicSubnet1:
    Description: A reference to the public subnet in the 1st Availability Zone
    Value:
      Ref: PublicSubnet1
  PublicSubnet2:
    Description: A reference to the public subnet in the 2nd Availability Zone
    Value:
      Ref: PublicSubnet2
  DefaultSecurityGroup:
    Description: Default Security group
    Value:
      Fn::GetAtt:
      - VPC
      - DefaultSecurityGroup
  EfsFileSystem:
    Description: EFS File System ID
    Value:
      Ref: FileSystemResource
  EfsAccessPoint:
    Description: EFS Access Point ID
    Value:
      Ref: AccessPointResource
  VideosBucketName:
    Description: S3 Video bucket name
    Value:
      Ref: VideosBucketName
  TriggerFunctionName:
    Description: Function name for triggering step function
    Value: !GetAtt TriggerFunction.Arn
    Export:
      Name: !Sub "${AWS::StackName}-TriggerFunctionName"
