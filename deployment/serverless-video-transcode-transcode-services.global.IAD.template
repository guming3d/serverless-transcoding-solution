AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: '(SO8014) - The AWS CloudFormation template for deployment of the AWS Serverless Video Transcode transcode related resources'

Mappings:
  SourceCode:
    General:
      S3Bucket: "%%BUCKET_NAME%%"
      KeyPrefix: "%%SOLUTION_NAME%%/%%VERSION%%"
      S3TemplateBucket: "%%TEMPLATE_BUCKET_NAME%%"
      SolutionName: "%%SOLUTION_NAME%%"
Metadata:
  AWS::ServerlessRepo::Application:
    Name: serverless-video-transcoder
    Description: Serverless Video Transcoder
    Author: Harold Sun / George Gu
    SpdxLicenseId: Apache-2.0
    LicenseUrl: s3://serverless-video-transcoder/assets/2b42edef8fa55315f34f2370b4715ca9
    ReadmeUrl: s3://serverless-video-transcoder/assets/305ba29b9cfc7e3bcb9b191c3e752078
    Labels:
    - S3
    - Lambda
    - Step_Functions
    - Video
    - Transcode
    HomePageUrl: https://github.com/bnusunny/serverless-video-transcoder
    SemanticVersion: '0.0.2'
    SourceCodeUrl: https://github.com/bnusunny/serverless-video-transcoder
Parameters:
  EnvironmentName:
    Description: An environment name that is prefixed to resource names
    Type: String
    Default: Dev
  SourceS3Bucket:
    Type: String
  SourceKeyPrefix:
    Type: String
  VpcCIDR:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    Default: 10.192.0.0/16
  PublicSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in
      the first Availability Zone
    Type: String
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    Default: 10.192.0.0/20
  PublicSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in
      the second Availability Zone
    Type: String
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    Default: 10.192.16.0/20
Globals:
  Function:
    Timeout: 30
    Runtime: python3.7
    MemorySize: 512
    Tracing: Active
    Layers:
    - Fn::Sub: arn:${AWS::Partition}:lambda:${AWS::Region}:580247275435:layer:LambdaInsightsExtension:12
Resources:
  ServerlessVideoTranscodeTriggerRole:
    Type: "AWS::IAM::Role"
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W28
            reason: "one role for one account"
    Properties:
      RoleName:
        !Join [ "-", [ "serverless-video-transcode-trigger-role", Ref: "AWS::Region" ] ]
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
  ServerlessVideoTranscodeDDBPolicy:
    Type: "AWS::IAM::ManagedPolicy"
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W13
            reason: "DDB table name is dynamically generated when deploying, can not specify here"
    Properties:
      Description: "Serverless Video Transcode policy for transcode Lambda function."
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action:
              - "dynamodb:BatchGetItem"
              - "dynamodb:BatchWriteItem"
              - "dynamodb:DeleteItem"
              - "dynamodb:GetItem"
              - "dynamodb:PutItem"
              - "dynamodb:Query"
              - "dynamodb:Scan"
              - "dynamodb:UpdateItem"
            Resource: "*"
      Roles:
        - Ref: "ServerlessVideoTranscodeTriggerRole"
  JobTable:
    Type: AWS::Serverless::SimpleTable
  FFmpegLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      ContentUri: s3://serverless-video-transcoder/assets/b58ac6543eb64e6cefc1bab452d893ca
      CompatibleRuntimes:
      - python3.8
      - python3.7
      - python3.6
  TriggerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri:
        Bucket: !FindInMap ["SourceCode", "General", "S3TemplateBucket"]
        Key: !Join ["/", [ !FindInMap ["SourceCode", "General", "KeyPrefix"], "serverless-video-transcode-transcode-trigger.zip"]]
      Handler: app.lambda_handler
      FunctionName: serverless-video-transcode-trigger-transcode
      Policies:
      - DynamoDBWritePolicy:
          TableName:
            Ref: JobTable
      - StepFunctionsExecutionPolicy:
          StateMachineName:
            Fn::GetAtt:
            - MainStateMachine
            - Name
      - CloudWatchLambdaInsightsExecutionRolePolicy
      - AmazonDynamoDBFullAccess
      Environment:
        Variables:
          JOB_TABLE:
            Ref: JobTable
          SFN_ARN:
            Ref: MainStateMachine
          DEFAULT_SEGMENT_TIME: 60
          ENABLE_HLS: 0
      Layers:
      - Ref: FFmpegLayer
  MainStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      DefinitionUri:
        Bucket: !FindInMap ["SourceCode", "General", "S3TemplateBucket"]
        Key: !Join ["/", [  !FindInMap ["SourceCode", "General", "KeyPrefix"], "main.asl.json"]]
      Tracing:
        Enabled: true
      DefinitionSubstitutions:
        ControllerFunctionArn:
          Fn::GetAtt:
          - ControllerFunction
          - Arn
        TranscodeVideoFunctionArn:
          Fn::GetAtt:
          - TranscodeVideoFunction
          - Arn
        MergeVideoFunctionArn:
          Fn::GetAtt:
          - MergeVideoFunction
          - Arn
      Policies:
      - CloudWatchPutMetricPolicy: {}
      - CloudWatchLogsFullAccess
      - LambdaInvokePolicy:
          FunctionName:
            Ref: ControllerFunction
      - LambdaInvokePolicy:
          FunctionName:
            Ref: TranscodeVideoFunction
      - LambdaInvokePolicy:
          FunctionName:
            Ref: MergeVideoFunction
      - CloudWatchLambdaInsightsExecutionRolePolicy
      - AWSXRayDaemonWriteAccess
      - AmazonDynamoDBFullAccess
  ControllerFunction:
    Type: AWS::Serverless::Function
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W43
            reason: ""
    Properties:
      CodeUri:
        Bucket: !FindInMap [ "SourceCode", "General", "S3TemplateBucket" ]
        Key: !Join [ "/", [ !FindInMap [ "SourceCode", "General", "KeyPrefix" ], "serverless-video-transcode-transcode-controller.zip" ] ]
      Handler: app.lambda_handler
      MemorySize: 10240
      Timeout: 900
      Environment:
        Variables:
          PARALLEL_GROUPS: 3
          DEFAULT_CONCURENCY: 30
          DEFAULT_SEGMENT_TIME: 30
      Layers:
      - Ref: FFmpegLayer
      Policies:
      - CloudWatchLambdaInsightsExecutionRolePolicy
      - AmazonS3FullAccess
      - AmazonDynamoDBFullAccess
      - AdministratorAccess
      VpcConfig:
        SecurityGroupIds:
        - Fn::GetAtt:
          - VPC
          - DefaultSecurityGroup
        SubnetIds:
        - Ref: PublicSubnet1
        - Ref: PublicSubnet2
    DependsOn:
    - MountTargetResource1
    - MountTargetResource2
  TranscodeVideoFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri:
        Bucket: !FindInMap [ "SourceCode", "General", "S3TemplateBucket" ]
        Key: !Join [ "/", [ !FindInMap [ "SourceCode", "General", "KeyPrefix" ], "serverless-video-transcode-transcode-video.zip" ] ]
      Handler: app.lambda_handler
      MemorySize: 10240
      Timeout: 900
      Environment:
        Variables: []
      Layers:
      - Ref: FFmpegLayer
      Policies:
      - CloudWatchLambdaInsightsExecutionRolePolicy
      - AmazonS3FullAccess
      - AmazonDynamoDBFullAccess
      VpcConfig:
        SecurityGroupIds:
        - Fn::GetAtt:
          - VPC
          - DefaultSecurityGroup
        SubnetIds:
        - Ref: PublicSubnet1
        - Ref: PublicSubnet2
    DependsOn:
    - MountTargetResource1
    - MountTargetResource2
  MergeVideoFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri:
        Bucket: !FindInMap [ "SourceCode", "General", "S3TemplateBucket" ]
        Key: !Join [ "/", [ !FindInMap [ "SourceCode", "General", "KeyPrefix" ], "serverless-video-transcode-transcode-merge.zip" ] ]
      Handler: app.lambda_handler
      MemorySize: 10240
      Timeout: 900
      Environment:
        Variables: []
      Layers:
      - Ref: FFmpegLayer
      Policies:
      - CloudWatchLambdaInsightsExecutionRolePolicy
      - AmazonS3FullAccess
      - AmazonDynamoDBFullAccess
      VpcConfig:
        SecurityGroupIds:
        - Fn::GetAtt:
          - VPC
          - DefaultSecurityGroup
        SubnetIds:
        - Ref: PublicSubnet1
        - Ref: PublicSubnet2
    DependsOn:
    - MountTargetResource1
    - MountTargetResource2
  VPC:
    Type: AWS::EC2::VPC
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W60
            reason: "no need flow log"
    Properties:
      CidrBlock:
        Ref: VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
      - Key: Name
        Value:
          Ref: EnvironmentName
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value:
          Ref: EnvironmentName
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId:
        Ref: InternetGateway
      VpcId:
        Ref: VPC
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W33
            reason: "EFS is only used by lambda"
    Properties:
      VpcId:
        Ref: VPC
      AvailabilityZone:
        Fn::Select:
        - 0
        - Fn::GetAZs: ''
      CidrBlock:
        Ref: PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value:
          Fn::Sub: ${EnvironmentName} Public Subnet (AZ1)
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W33
            reason: "EFS is only used by lambda"
    Properties:
      VpcId:
        Ref: VPC
      AvailabilityZone:
        Fn::Select:
        - 1
        - Fn::GetAZs: ''
      CidrBlock:
        Ref: PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value:
          Fn::Sub: ${EnvironmentName} Public Subnet (AZ2)
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value:
          Fn::Sub: ${EnvironmentName} Public Routes
  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId:
        Ref: PublicRouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId:
        Ref: InternetGateway
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: PublicRouteTable
      SubnetId:
        Ref: PublicSubnet1
  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: PublicRouteTable
      SubnetId:
        Ref: PublicSubnet2
  EndpointS3:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      RouteTableIds:
      - Ref: PublicRouteTable
      ServiceName:
        Fn::Sub: com.amazonaws.${AWS::Region}.s3
      VpcId:
        Ref: VPC
  EndpointDDB:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      RouteTableIds:
      - Ref: PublicRouteTable
      ServiceName:
        Fn::Sub: com.amazonaws.${AWS::Region}.dynamodb
      VpcId:
        Ref: VPC
Outputs:
  VPC:
    Description: A reference to the created VPC
    Value:
      Ref: VPC
  PublicSubnets:
    Description: A list of the public subnets
    Value:
      Fn::Join:
      - ','
      - - Ref: PublicSubnet1
        - Ref: PublicSubnet2
  PublicSubnet1:
    Description: A reference to the public subnet in the 1st Availability Zone
    Value:
      Ref: PublicSubnet1
  PublicSubnet2:
    Description: A reference to the public subnet in the 2nd Availability Zone
    Value:
      Ref: PublicSubnet2
  DefaultSecurityGroup:
    Description: Default Security group
    Value:
      Fn::GetAtt:
      - VPC
      - DefaultSecurityGroup
  TriggerFunctionName:
    Description: Function name for triggering step function
    Value: !GetAtt TriggerFunction.Arn
    Export:
      Name: !Sub "${AWS::StackName}-TriggerFunctionName"
